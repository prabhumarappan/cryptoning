{"ast":null,"code":"var _jsxFileName = \"/Users/Iffat/New Crypto currency/cryptoning/src/components/Tweets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar axios = require('axios');\n\nfunction Tweets() {\n  _s();\n\n  const {\n    slug\n  } = useParams();\n  const [tweetIds, setTweetIds] = useState([]);\n  useEffect(() => {\n    fetchTweets();\n  }, []);\n\n  function fetchTweets() {\n    if (JSON.parse(localStorage.getItem('tweetdata')) == null) {\n      axios.get(`/.netlify/functions/getTweets?query=${slug}`).then(response => {\n        let tweets = response.data.data.data;\n        let localTweets = [];\n\n        for (var i = 0; i < tweets.length; i++) {\n          localTweets.push(tweets[i]);\n        }\n\n        localStorage.setItem('tweetdata', JSON.stringify(localTweets));\n        setTweetIds(localTweets);\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      console.log(\"FOUND TWEETS IN LOCAL STORE\");\n      let localTweets = JSON.parse(localStorage.getItem('tweetdata'));\n      setTweetIds(localTweets);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: \"12\",\n          sm: \"12\",\n          xs: \"12\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center\",\n            children: [\"Tweets for \", slug]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 5\n        }, this), tweetIds.map(item => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            xs: \"12\",\n            sm: \"12\",\n            md: \"6\",\n            lg: \"4\",\n            children: /*#__PURE__*/_jsxDEV(TwitterTweetEmbed, {\n              options: {},\n              tweetId: item.id\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n}\n\n_s(Tweets, \"JoaDubSu1AwrzwcZOik7qzuW7sU=\", false, function () {\n  return [useParams];\n});\n\n_c = Tweets;\nexport { Tweets };\n\nvar _c;\n\n$RefreshReg$(_c, \"Tweets\");","map":{"version":3,"sources":["/Users/Iffat/New Crypto currency/cryptoning/src/components/Tweets.js"],"names":["React","useState","useEffect","Container","Row","Col","useParams","TwitterTweetEmbed","axios","require","Tweets","slug","tweetIds","setTweetIds","fetchTweets","JSON","parse","localStorage","getItem","get","then","response","tweets","data","localTweets","i","length","push","setItem","stringify","catch","error","console","log","map","item","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM;AAACC,IAAAA;AAAD,MAAUL,SAAS,EAAzB;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASA,WAAT,GAAuB;AACrB,QAAIC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,KAAiD,IAArD,EAA2D;AACzDV,MAAAA,KAAK,CAACW,GAAN,CAAW,uCAAsCR,IAAK,EAAtD,EACGS,IADH,CACSC,QAAD,IAAc;AAClB,YAAIC,MAAM,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBA,IAAhC;AAEA,YAAIC,WAAW,GAAG,EAAlB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAyC;AACvCD,UAAAA,WAAW,CAACG,IAAZ,CAAiBL,MAAM,CAACG,CAAD,CAAvB;AACD;;AACDR,QAAAA,YAAY,CAACW,OAAb,CAAqB,WAArB,EAAkCb,IAAI,CAACc,SAAL,CAAeL,WAAf,CAAlC;AAEAX,QAAAA,WAAW,CAACW,WAAD,CAAX;AACD,OAXH,EAYGM,KAZH,CAYUC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OAdH;AAeD,KAhBD,MAiBK;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACG,UAAIT,WAAW,GAAGT,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAlB;AACAL,MAAAA,WAAW,CAACW,WAAD,CAAX;AACH;AACA;;AAED,sBACE;AAAA,2BACD,QAAC,SAAD;AAAA,6BACA,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACC,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,IAAR;AAAa,UAAA,EAAE,EAAC,IAAhB;AAAqB,UAAA,EAAE,EAAC,IAAxB;AAAA,iCACA;AAAI,YAAA,SAAS,EAAC,aAAd;AAAA,sCAAyCb,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADD,EAKSC,QAAQ,CAACsB,GAAT,CAAaC,IAAI,IAAI;AACnB,8BACA,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,IAAR;AAAa,YAAA,EAAE,EAAC,IAAhB;AAAqB,YAAA,EAAE,EAAC,GAAxB;AAA4B,YAAA,EAAE,EAAC,GAA/B;AAAA,mCACE,QAAC,iBAAD;AAAmB,cAAA,OAAO,EAAE,EAA5B;AAAgC,cAAA,OAAO,EAAEA,IAAI,CAACC;AAA9C,eAAuDD,IAAI,CAACC,EAA5D;AAAA;AAAA;AAAA;AAAA;AADF,aAAwCD,IAAI,CAACC,EAA7C;AAAA;AAAA;AAAA;AAAA,kBADA;AAKD,SAND,CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADC,mBADF;AAoBD;;GArDQ1B,M;UACSJ,S;;;KADTI,M;AAuDT,SAASA,MAAT","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nvar axios = require('axios');\n\nfunction Tweets() {\n  const {slug } = useParams();\n  const [tweetIds, setTweetIds] = useState([]);\n\n  useEffect(() => {\n    fetchTweets();\n  }, [])\n\n  function fetchTweets() {\n    if (JSON.parse(localStorage.getItem('tweetdata')) == null) {\n      axios.get(`/.netlify/functions/getTweets?query=${slug}`)\n        .then((response) => {\n          let tweets = response.data.data.data;\n\n          let localTweets = [];\n          for (var i = 0; i < tweets.length; i ++) {\n            localTweets.push(tweets[i]);\n          }\n          localStorage.setItem('tweetdata', JSON.stringify(localTweets));\n\n          setTweetIds(localTweets);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n    else {\n\t\t\tconsole.log(\"FOUND TWEETS IN LOCAL STORE\");\n      let localTweets = JSON.parse(localStorage.getItem('tweetdata'));\n      setTweetIds(localTweets);\n\t\t}\n  }\n\n  return (\n    <>\n\t\t\t<Container >\n\t\t\t<Row className='mt-4'>\n\t\t\t\t<Col md=\"12\" sm=\"12\" xs=\"12\">\n\t\t\t\t<h1 className='text-center'>Tweets for { slug }</h1>\n\t\t\t\t</Col>\n            {\n            tweetIds.map(item => {\n              return (\n              <Col xs=\"12\" sm=\"12\" md=\"6\" lg=\"4\" key={item.id}>\n                <TwitterTweetEmbed options={{}} tweetId={item.id} key={item.id} />\n              </Col>\n              )\n            })\n          }\n\t\t\t</Row>\n\t\t\t</Container>\n\t\t</>\n  )\n}\n\nexport { Tweets };"]},"metadata":{},"sourceType":"module"}